X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, 0.2*N), replace=TRUE)
corrs[i] = cor(X[indexes], y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
zs <- FisherZ(corrs)
install.packages("DescTools")
library(DescTools)
zs <- FisherZ(corrs)
rs <- FisherZInv(zs)
round(zs, 2)
n <- 30
r <- seq(0,.9,.1)
rc <- t(sapply(r, CorCI, n=n))
t <- r*sqrt(n-2)/sqrt(1-r^2)
p <- (1-pt(t,n-2))/2
r.rc <- data.frame(r=r, z=FisherZ(r), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
zs
install.packages("DescTools")
library(DescTools)
zs <- FisherZ(corrs)
rs <- FisherZInv(zs)
round(zs, 2)
n <- N
r <- corrs
rc <- t(sapply(r, CorCI, n=n))
t <- r*sqrt(n-2)/sqrt(1-r^2)
p <- (1-pt(t,n-2))/2
r.rc <- data.frame(r=r, z=FisherZ(r), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
zs <- FisherZ(corrs)
rs <- FisherZInv(zs)
round(zs, 2)
n <- N
r <- corrs
rc <- t(sapply(r, CorCI, n=n))
t <- r*sqrt(n-2)/sqrt(1-r^2)
p <- (1-pt(t,n-2))/2
r.rc <- data.frame(r=r, z=FisherZ(r), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
zs
zs <- FisherZ(cor(X,y))
rs <- FisherZInv(zs)
round(zs, 2)
N-2
rc <- t(sapply(corrs, CorCI, n=N))
t <- corrs*sqrt(N-2)/sqrt(1-corrs^2)
p <- (1-pt(t,N-2))/2
r.rc <- data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
corrs = rs
rc <- t(sapply(corrs, CorCI, n=N))
t <- corrs*sqrt(N-2)/sqrt(1-corrs^2)
p <- (1-pt(t,N-2))/2
r.rc <- data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
corrs = seq(-0.10, -0.05, 0.0, 0.05, 0.10, 0.15)
corrs = seq(-.9, .9, .1)
rc <- t(sapply(corrs, CorCI, n=N))
t <- corrs*sqrt(N-2)/sqrt(1-corrs^2)
p <- (1-pt(t,N-2))/2
r.rc <- data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
corrs = seq(-.9, .9, .25)
rc <- t(sapply(corrs, CorCI, n=N))
t <- corrs*sqrt(N-2)/sqrt(1-corrs^2)
p <- (1-pt(t,N-2))/2
r.rc <- data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
corrs = seq(-.9, .9, .2)
rc <- t(sapply(corrs, CorCI, n=N))
t <- corrs*sqrt(N-2)/sqrt(1-corrs^2)
p <- (1-pt(t,N-2))/2
r.rc <- data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(r.rc,2)
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
hist(corrs)
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
hist(corrs)
zs = FisherZ(seq(-0.95, 0.95, 0.15))
rs = FisherZInv(zs)
round(zs, 2)
seq(-0.95, 0.95, 0.15)
seq(-0.90, 0.95, 0.15)
seq(-0.90, 0.90, 0.15)
seq(-0.9, 0.9, 0.15)
zs = FisherZ(seq(-0.90, 0.90, 0.15))
rs = FisherZInv(zs)
round(zs, 2)
CorCI(corrs, N, conf.level = 0.95, alternative = c("two.sided", "less", "greater"))
corrs = seq(-0.90, 0.90, 0.15)
# mumble
rc = t(sapply(corrs, CorCI, n=N))
t = corrs*sqrt(N-2)/sqrt(1-corrs^2)
p = (1-pt(t,N-2))/2
zresults =  data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(zresults, 2)
corrs = seq(0.90, -0.90, -0.15)
# mumble
rc = t(sapply(corrs, CorCI, n=N))
t = corrs*sqrt(N-2)/sqrt(1-corrs^2)
p = (1-pt(t,N-2))/2
zresults =  data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(zresults, 2)
corrs = seq(0, 1, 0.1)
# mumble
rc = t(sapply(corrs, CorCI, n=N))
t = corrs*sqrt(N-2)/sqrt(1-corrs^2)
p = (1-pt(t,N-2))/2
zresults =  data.frame(r=corrs, z=FisherZ(corrs), lower=rc[,2], upper=rc[,3], t=t, p=p)
round(zresults, 2)
# BOOTSTRAP
dt = subset(df, select = c("Rating_price","Age"))
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
hist(corrs)
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
hist(corrs)
## LIBRARY
#install.packages('boot')
library(boot)
foo = function(data, indexes) {
return(cor(data[indexes,1],data[indexes,2]))
}
results = boot(dt, foo, R = n_iter, stype = 'i' )
results
zs = FisherZ(corrs)
round(zs, 2)
zs = FisherZ(corrs)
hist(zs)
round(zs, 2)
install.packages("gmodels")
library(gmodels)
ci( rnorm(10) )
ci( rnorm(10) )
ci( rnorm(100) )
ci( rnorm(1000) )
ci( rnorm(100) )
ci( rnorm(10) )
ci(zs, confidence=0.95, alpha=1-confidence)
ci(zs, confidence=0.95)
ci(zs, confidence=0.95)$Estimate
ci(zs, confidence=0.95)['Estimate']
FisherZInv(ci(zs, confidence=0.95)['Estimate'])
est = ci(zs, confidence=0.95)['Estimate']
mu_hat = est['Estimate']
est
FisherZInv(mu_hat)
est = ci(zs, confidence=0.95)
mu_hat = est['Estimate']
est
FisherZInv(mu_hat)
unlink("//wsl.localhost/manzi/home/tosho/manzi/assone_cache", recursive = TRUE)
library(DescTools)
library(boot)
library(gmodels)
library(Ryacas)
library(mosaic)
library(stats)
library(mosaicCalc)
library(GoFKernel)
infinite = 75
F = function(x) (1 - (1/exp((x^2)/8)))
x = ysym("x")
lim(F(x), x, +Inf)
F_mos = makeFun(F(x) ~ x)
plotFun( F_mos(x) ~ x, xlim = c(0, 10) )
f = function(x) {}
body(f) = D(body(F), 'x')
curve(f, 0, 10, ylab = "PDF(x)")
F(2.3) - F(0)
M = antiD((1-F(x)) ~ x)
mu = M(+Inf) - M(0)
mu
MM = antiD((x*f(x)*(x)) ~ x)
ex2 = MM(infinite) - MM(0)
ex2 - (mu*mu)
F_inv = inverse(F, lower=0, upper=infinite)
F_inv(0.5)
df = read.csv(file = 'CustomerCare.csv')
dt = subset(df, select = c("Rating_price","Age"))
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
boot_mu = mean(corrs)
boot_std_err = sqrt((sum(corrs - boot_mu)^2)/(n_iter-1))
boot_mu
boot_std_err
hist(corrs)
est = ci(corrs, confidence=0.95)
mu_hat = est['Estimate']
est
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
est = ci(corrs, confidence=0.95)
mu_hat = est['Estimate']
est
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
est = ci(corrs, confidence=0.95)
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
ci(corrs, confidence=0.95)
## LIBRARY
foo = function(data, indexes) {
return(cor(data[indexes,1],data[indexes,2]))
}
results = boot(dt, foo, R = n_iter, stype = 'i' )
results
zs = FisherZ(corrs)
hist(zs)
est = ci(zs, confidence=0.95)
mu_hat = est['Estimate']
est
FisherZInv(mu_hat)
est = ci(zs, confidence=0.95)
FisherZInv(est)
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
round(ci(corrs, confidence=0.95), 2)
library(DescTools)
library(boot)
library(gmodels)
library(Ryacas)
library(mosaic)
library(stats)
library(mosaicCalc)
library(GoFKernel)
infinite = 75
library(DescTools)
library(boot)
library(gmodels)
library(Ryacas)
library(mosaic)
library(stats)
library(mosaicCalc)
library(GoFKernel)
infinite = 75
df = read.csv(file = 'CustomerCare.csv')
dt = subset(df, select = c("Rating_price","Age"))
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
round(ci(corrs, confidence=0.95), 3)
## LIBRARY
foo = function(data, indexes) {
return(cor(data[indexes,1],data[indexes,2]))
}
results = boot(dt, foo, R = n_iter, stype = 'i' )
round(results, 3)
## LIBRARY
foo = function(data, indexes) {
return(cor(data[indexes,1],data[indexes,2]))
}
results = boot(dt, foo, R = n_iter, stype = 'i' )
results
zs = FisherZ(corrs)
hist(zs)
est = ci(zs, confidence=0.95)
round(FisherZInv(est), 3)
setwd('H:')
setwd("H:/Not A Tardis/manzi-2022")
library(DescTools)
library(GoFKernel)
library(Ryacas)
library(boot)
library(gmodels)
library(knitr)
library(mosaic)
library(mosaicCalc)
library(rmarkdown)
library(stats)
infinite = 75
F = function(x) (1 - (1/exp((x^2)/8)))
x = ysym("x")
lim(F(x), x, +Inf)
F_mos = makeFun(F(x) ~ x)
plotFun( F_mos(x) ~ x, xlim = c(0, 10) )
F(2.3) - F(0)
M = antiD((1-F(x)) ~ x)
mu = M(+Inf) - M(0)
mu
MM = antiD((x*f(x)*(x)) ~ x)
ex2 = MM(infinite) - MM(0)
f = function(x) {}
body(f) = D(body(F), 'x')
curve(f, 0, 10, ylab = "PDF(x)")
MM = antiD((x*f(x)*(x)) ~ x)
ex2 = MM(infinite) - MM(0)
ex2 - (mu*mu)
F_inv = inverse(F, lower=0, upper=infinite)
F_inv(0.5)
df = read.csv(file = 'CustomerCare.csv')
dt = subset(df, select = c("Rating_price","Age"))
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
round(ci(corrs, confidence=0.95), 3)
## LIBRARY
foo = function(data, indexes) {
return(cor(data[indexes,1],data[indexes,2]))
}
results = boot(dt, foo, R = n_iter, stype = 'i' )
results
zs = FisherZ(corrs)
hist(zs)
est = ci(zs, confidence=0.95)
round(FisherZInv(est), 3)
est = ci(zs, confidence=0.95)
pkg = round(FisherZInv(est), 3)
pkg
## STEP BY STEP
n_iter = 1000
corrs = rep(NULL, n_iter)
for (i in 1:n_iter){
indexes = as.matrix(sample(1:N, sqrt(N)), replace=TRUE)
corrs[i] = cor(X[indexes], Y[indexes])
}
hist(corrs)
sbs = round(ci(corrs, confidence=0.95), 3)
sbs
data = data.frame(
x = c('step by step', 'package fisher'),
y = c(sbs['Estimate'], pkg['Estimate']),
lower = c(sbs['CI lower'], pkg['CI lower']),
upper = c(sbs['CI upper'], pkg['CI upper'])
)
install.packages("plotrix")
library("plotrix")
plotCI(x = data$x,
y = data$y,
li = data$lower,
ui = data$upper)
data = data.frame(
x = c(1:2),
y = c(sbs['Estimate'], pkg['Estimate']),
lower = c(sbs['CI lower'], pkg['CI lower']),
upper = c(sbs['CI upper'], pkg['CI upper'])
)
#install.packages("plotrix")
library("plotrix")
plotCI(x = data$x,
y = data$y,
li = data$lower,
ui = data$upper)
F_mos = makeFun(F(x) ~ x)
plotFun( F_mos(x) ~ x, xlim = c(-10, 10) )
# TODO
F_mos = makeFun(F(x) ~ x)
plotFun( F_mos(x) ~ x, xlim = c(-2, 10) )
# TODO
zs = FisherZ(cor(X,Y))
zs = FisherZ(cor(X,Y))
zs
zs = FisherZ(cor(X,Y))
zs
ci_cor(X, Y, method = "pearson", type = c("normal", "bootstrap"))
zs = FisherZ(cor(X,Y))
zs
install.packages('confintr')
library(confintr)
ci_cor(X, Y, method = "pearson", type = "normal")
ci_cor(X, Y, method = "pearson", type = "bootstrap")
zs = FisherZ(cor(X,Y))
zs
install.packages('confintr')
library(confintr)
round(ci_cor(X, Y, method = "pearson", type = "normal"), 3)
zs = FisherZ(cor(X,Y))
zs
#install.packages('confintr')
library(confintr)
round(ci_cor(X, Y, method = "pearson", type = "normal"), 3)
zs = FisherZ(cor(X,Y))
zs
#install.packages('confintr')
library(confintr)
ci_cor(X, Y, method = "pearson", type = "normal")
ci_cor(X, Y, method = "pearson", type = "bootstrap")
zs = FisherZ(cor(X,Y))
zs
#install.packages('confintr')
library(confintr)
tmp1 = ci_cor(X, Y, method = "pearson", type = "normal")
tmp2 = ci_cor(X, Y, method = "pearson", type = "bootstrap")
zs = FisherZ(cor(X,Y))
zs
est = ci(zs, confidence=0.95)
pkg = round(FisherZInv(est), 3)
pkg
dt = subset(df, select = c("Rating_price","Age"))
N = length(dt[,1])
X = df$Age
Y = df$Rating_price
